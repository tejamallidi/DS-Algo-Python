Graphs will have edges and nodes
1. Directed
2. Undirected
3. Weighted

Neighbor node is any node adjacent to a node and can be reachable from it.

Adjaceny List is used to represent the data of a graph

a --> c
|
|
v
b <-- e
|
|
v
d <-- f

To traverse through a grapgh we can use the following traversals
1. Depth First Search traversal
2. Breadth First Search traversal

DFS: Uses a Stack
Go in a single direction from a-->b-->d and then a-->c-->e-->b-->d

BFS: Uses a Queue
Goes to all the neighbours and do the same recursively
a-->c or a-->b to start with and go to the corresponding neighbours

Acyclic Graph:
Graph with no possible cycles in it.

Time and space complexity:
let n # of nodes, e # of edges
To traverse the graph, we will n - nodes and n^2 edges to cover
Time - o(e)
Space - o(n)

For any problem: 
check if the graph is acyclic or cyclic
check whether we got a direct adjacency list or an edge list, which we have to convert to an adjacency list 
if the graph is cyclic, make sure to note the visited nodes to avoid infinite loop


Count Connected Components:
Count the connected components using a count variable with the help of an iteration over all the nodes in the graph

** Check for the type of data in adjacency list